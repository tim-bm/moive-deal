/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ListMoiveResponse}
 */
// @ts-ignore
export function createListMoiveResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoListMoiveResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MoiveDTO}
 */
// @ts-ignore
export function createMoiveDTOFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMoiveDTO;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoListMoiveResponse(listMoiveResponse: Partial<ListMoiveResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "cinemaWorld": n => { listMoiveResponse.cinemaWorld = n.getCollectionOfObjectValues<MoiveDTO>(createMoiveDTOFromDiscriminatorValue); },
        "filmWorld": n => { listMoiveResponse.filmWorld = n.getCollectionOfObjectValues<MoiveDTO>(createMoiveDTOFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMoiveDTO(moiveDTO: Partial<MoiveDTO> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { moiveDTO.id = n.getStringValue(); },
        "poster": n => { moiveDTO.poster = n.getStringValue(); },
        "price": n => { moiveDTO.price = n.getStringValue(); },
        "title": n => { moiveDTO.title = n.getStringValue(); },
        "year": n => { moiveDTO.year = n.getStringValue(); },
    }
}
export interface ListMoiveResponse extends Parsable {
    /**
     * The cinemaWorld property
     */
    cinemaWorld?: MoiveDTO[] | null;
    /**
     * The filmWorld property
     */
    filmWorld?: MoiveDTO[] | null;
}
export interface MoiveDTO extends Parsable {
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The poster property
     */
    poster?: string | null;
    /**
     * The price property
     */
    price?: string | null;
    /**
     * The title property
     */
    title?: string | null;
    /**
     * The year property
     */
    year?: string | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeListMoiveResponse(writer: SerializationWriter, listMoiveResponse: Partial<ListMoiveResponse> | undefined | null = {}) : void {
    if (listMoiveResponse) {
        writer.writeCollectionOfObjectValues<MoiveDTO>("cinemaWorld", listMoiveResponse.cinemaWorld, serializeMoiveDTO);
        writer.writeCollectionOfObjectValues<MoiveDTO>("filmWorld", listMoiveResponse.filmWorld, serializeMoiveDTO);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMoiveDTO(writer: SerializationWriter, moiveDTO: Partial<MoiveDTO> | undefined | null = {}) : void {
    if (moiveDTO) {
        writer.writeStringValue("id", moiveDTO.id);
        writer.writeStringValue("poster", moiveDTO.poster);
        writer.writeStringValue("price", moiveDTO.price);
        writer.writeStringValue("title", moiveDTO.title);
        writer.writeStringValue("year", moiveDTO.year);
    }
}
/* tslint:enable */
/* eslint-enable */
